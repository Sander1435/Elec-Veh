function [V_result, overspeed] = Opti_EV_PT_1spd(x)%% Global variablesglobal N_simglobal g1 scale_EMglobal ta mvglobal x_resultglobal y_resultglobal z_result%% Model namesys_name = 'EV_1spd_4AUB10_2023b';load_system(sys_name);P = [x(1) x(2) 24 144 2 2 2 1];  % set of input design parameters, xg1              = P(1);       % gear ratio [-]scale_EM        = P(2);       % EM scale [-]Np              = P(3);       % Number of cells connected in parallel [-]Ns              = P(4);       % Number of cells connected in series [-]motortype       = P(5);       % Motortype 1 is a PMSM and Motortype 2 is a IM [-] motornumberinit = P(6);       % This parameter changes between 2 powers of an engineBatterySort     = P(7);       % Decides between High Power(2) or Energy cells(1) [-]CellSort        = P(8);       % Decides the exact cells used for HE from 1 to 2[-] and for HP 1 to 4[-]%% Set constrainsreq      = [10,120];   % acc time [s], max speed [km/h]ta_req   = req(1);     % acceleration time requirement [s]vmax_req = req(2)/3.6; % top speed requirement [m/s]%% Build matrix of optimization parameter valuesx_result = [x_result; x'];y_result = [y_result; [mv]'];z_result = [z_result; [ta]'];init_model_opti;%% SimulationV_result=1e9;if scale_EM<0    returnendoptions = simset('SrcWorkspace','current');results = sim(sys_name,[],options);% Consider last value of the computed fuel consumption vector V_result = results.Consumption(end);% Check whether cycle could be finished exactly in N_sim computational steps;% if cycle duration is less than N_sim, set fuel consumption to infiniteif (max(size(results.t)) < N_sim)     V_result = Inf;end% Check whether acceleration time constraint is satisfiedif ta <= ta_req && V_result ~=inf    V_result = V_result;else    V_result = Inf;endif vmax >= vmax_req && V_result ~=inf    V_result = V_result;else    V_result = Inf;end