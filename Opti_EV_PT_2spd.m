function [V_result, overspeed] = Opti_EV_PT_2spd(x)%% Global variablesglobal N_simglobal g1global g2global scale_EMglobal Npglobal Nsglobal s1global ta mvglobal x_resultglobal y_resultglobal z_result%% Model namesys_name = 'EV_2spd_4AUB10_2023b';load_system(sys_name);P = [x(1) x(2) x(3) x(4) x(5) 2 2 1 2 x(6)];  % set of input design parameters, xg1              = P(1);       % gear ratio [-]g2              = P(2);       % gear ratio [-]scale_EM        = P(3);       % EM scale [-]Np              = P(4);       % Number of cells connected in parallel [-]Ns              = P(5);       % Number of cells connected in series [-]motortype       = P(6);       % Motortype 1 is a PMSM and Motortype 2 is a IM [-] motornumberinit = P(7);       % This parameter changes between 2 powers of an engineBatterySort     = P(8);       % Decides between High Power(2) or Energy cells(1) [-]CellSort        = P(9);       % Decides the exact cells used for HE from 1 to 2 and for HP 1 to 4s1              = P(10);      % Shift point of the car%%% --- Voltage Check Addition ---if BatterySort == 1    % For High Energy cells    V_cell_max = 4.2;elseif BatterySort == 2    % For High Power cells    switch CellSort        case 1            V_cell_max = 3.65;          case 2            V_cell_max = 2.7;           case {3,4}            V_cell_max = 4.2;           otherwise            V_cell_max = 4.2;       endelse    V_cell_max = 4.2; endbattery_pack_max_voltage = Ns * V_cell_max;if battery_pack_max_voltage > 1200        V_result = Inf;    overspeed = 1;     returnend%% Set constrainsreq      = [11,150];   % acc time [s], max speed [km/h]ta_req   = req(1);     % acceleration time requirement [s]vmax_req = req(2)/3.6; % top speed requirement [m/s]%% Build matrix of optimization parameter valuesx_result = [x_result; x'];y_result = [y_result; [mv]'];z_result = [z_result; [ta]'];init_model_opti;%% SimulationV_result=1e9;if scale_EM<0    returnendoptions = simset('SrcWorkspace','current');results = sim(sys_name,[],options);% Consider last value of the computed fuel consumption vector V_result = results.Consumption(end);% Check whether cycle could be finished exactly in N_sim computational steps;% if cycle duration is less than N_sim, set fuel consumption to infiniteif (max(size(results.t)) < N_sim)     V_result = Inf;end% Check whether acceleration time constraint is satisfiedif ta <= ta_req && V_result ~=inf    V_result = V_result;else    V_result = Inf;endif vmax >= vmax_req && V_result ~=inf    V_result = V_result;else    V_result = Inf;end